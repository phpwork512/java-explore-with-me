{
	"info": {
		"_postman_id": "faa53119-84e4-44d1-9f8b-4e5420bdcca8",
		"name": "Ewm comment feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24037302"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные должны содержать поля: id, name, email\", function () {\r",
							"    pm.expect(body).to.have.all.keys('id', 'name', 'email');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"userId\", body.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные должны содержать поля: id, name\", function () {\r",
							"    pm.expect(body).to.have.all.keys('id', 'name');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"categoryId\", body.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{$randomWord}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные должны содержать поля: id, title\", function () {\r",
							"    pm.expect(body).haveOwnProperty('id');//, 'title');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"eventId\", body.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"annotation\": \"{{$randomLoremSentence}}\",\r\n  \"category\": {{categoryId}},\r\n  \"description\": \"{{$randomLoremSentence}}\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": {{$randomLatitude}},\r\n    \"lon\": {{$randomLongitude}}\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"{{$randomWords}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Publish event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно быть опубликовано: state=PUBLISHED\", function () {\r",
							"    pm.expect(body.state == 'PUBLISHED');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/{{eventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"{{eventId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create author for comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные должны содержать поля: id, name, email\", function () {\r",
							"    pm.expect(body).to.have.all.keys('id', 'name', 'email');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"authorId\", body.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add comment to event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные должны содержать поля: id, text, event, author, created\", function () {\r",
							"    pm.expect(body).to.have.all.keys('id', 'text', 'event', 'author', 'created');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"commentId1\", body.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\" : \"{{$randomLoremParagraph}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/{{eventId}}/comments/{{authorId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"{{eventId}}",
						"comments",
						"{{authorId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add comment 2 to event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные должны содержать поля: id, text, event, author, created\", function () {\r",
							"    pm.expect(body).to.have.all.keys('id', 'text', 'event', 'author', 'created');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"commentId2\", body.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\" : \"{{$randomLoremParagraph}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/{{eventId}}/comments/{{authorId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"{{eventId}}",
						"comments",
						"{{authorId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update comment 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные должны содержать поля: id, text, event, author, created\", function () {\r",
							"    pm.expect(body).to.have.all.keys('id', 'text', 'event', 'author', 'created');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\" : {{commentId2}},\r\n    \"text\" : \"{{$randomLoremParagraph}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/{{eventId}}/comments/{{authorId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"{{eventId}}",
						"comments",
						"{{authorId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments for event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"pm.test(\"При запросе должны получить 2 записи\", function () {\r",
							"    pm.expect(body.length).to.equal(2);\r",
							"});\r",
							"\r",
							"const comment1 = pm.response.json()[0];\r",
							"const comment2 = pm.response.json()[1];\r",
							"\r",
							"pm.test(\"Данные должны содержать поля: id, text, event, created, author\", function () {\r",
							"    pm.expect(comment1).to.have.all.keys('id', 'text', 'event', 'created', 'author');\r",
							"    pm.expect(comment2).to.have.all.keys('id', 'text', 'event', 'created', 'author');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/{{eventId}}/comments/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"{{eventId}}",
						"comments",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete comment 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/{{eventId}}/comments/{{authorId}}/{{commentId2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"{{eventId}}",
						"comments",
						"{{authorId}}",
						"{{commentId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments for event after delete comment 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"pm.test(\"При запросе должны получить 1 запись\", function () {\r",
							"    pm.expect(body.length).to.equal(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Данные должны содержать поля: id, text, event, created, author\", function () {\r",
							"    pm.expect(body[0]).to.have.all.keys('id', 'text', 'event', 'created', 'author');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/{{eventId}}/comments/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"{{eventId}}",
						"comments",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "categoryId",
			"value": "",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "",
			"type": "string"
		},
		{
			"key": "authorId",
			"value": "",
			"type": "string"
		},
		{
			"key": "commentId1",
			"value": "",
			"type": "string"
		},
		{
			"key": "commentId2",
			"value": "",
			"type": "string"
		}
	]
}